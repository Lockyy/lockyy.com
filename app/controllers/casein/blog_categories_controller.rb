# Scaffolding generated by Casein v5.0.0.0

module Casein
  class BlogCategoriesController < Casein::CaseinController
  
    ## optional filters for defining usage according to Casein::AdminUser access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
  
    def index
      @casein_page_title = 'Blog categories'
  		@blog_categories = BlogCategory.order(sort_order(:title)).paginate :page => params[:page]
    end
  
    def show
      @casein_page_title = 'View blog category'
      @blog_category = BlogCategory.friendly.find params[:id]
    end
  
    def new
      @casein_page_title = 'Add a new blog category'
    	@blog_category = BlogCategory.new
    end

    def create
      @blog_category = BlogCategory.new blog_category_params
    
      if @blog_category.save
        flash[:notice] = 'Blog category created'
        redirect_to casein_blog_categories_path
      else
        flash.now[:warning] = 'There were problems when trying to create a new blog category'
        render :action => :new
      end
    end
  
    def update
      @casein_page_title = 'Update blog category'
      
      @blog_category = BlogCategory.friendly.find params[:id]
      @blog_post.slug = nil
    
      if @blog_category.update_attributes blog_category_params
        flash[:notice] = 'Blog category has been updated'
        redirect_to casein_blog_categories_path
      else
        flash.now[:warning] = 'There were problems when trying to update this blog category'
        render :action => :show
      end
    end
 
    def destroy
      @blog_category = BlogCategory.friendly.find params[:id]

      @blog_category.destroy
      flash[:notice] = 'Blog category has been deleted'
      redirect_to casein_blog_categories_path
    end
  
    private
      
      def blog_category_params
        params.require(:blog_category).permit(:title)
      end

  end
end